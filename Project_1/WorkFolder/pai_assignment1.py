# -*- coding: utf-8 -*-
"""PAI_assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l2r3P49bUqI8dz5mNLSa0eOCnPA9t6p7
"""

"""mounting google drive --> instructions:
place your files onto your google drive folder of your choice, then run this cell
you will be prompted to allow access to google colab
now select the file path on the server, the file directory can be found on the left vertical
taskbar. You can just navigate to the folder, right click and copy the directory of your .csv file"""

# from google.colab import drive
# drive.mount('/content/drive')

import numpy as np
from sklearn.linear_model import Ridge

THRESHOLD = 0.5
W1 = 1
W2 = 20
W3 = 100
W4 = 0.01

def cost_function(true, predicted):
    """
        true: true values in 1D numpy array
        predicted: predicted values in 1D numpy array

        return: float
    """
    cost = (true - predicted) ** 2

    # true above threshold (case 1)
    mask = true > THRESHOLD
    mask_w1 = np.logical_and(predicted > true, mask)
    mask_w2 = np.logical_and(np.logical_and(predicted < true, predicted > THRESHOLD), mask)
    mask_w3 = np.logical_and(predicted < THRESHOLD, mask)

    cost[mask_w1] = cost[mask_w1] * W1
    cost[mask_w2] = cost[mask_w2] * W2
    cost[mask_w3] = cost[mask_w3] * W3

    # true value below threshold (case 2)
    mask = true <= THRESHOLD
    mask_w1 = np.logical_and(predicted > true, mask)
    mask_w2 = np.logical_and(predicted < true, mask)

    cost[mask_w1] = cost[mask_w1] * W1
    cost[mask_w2] = cost[mask_w2] * W2

    # reward for correctly identified safe regions
    reward = W4 * np.logical_and(predicted <= THRESHOLD, true <= THRESHOLD)

    return np.mean(cost) - np.mean(reward)

"""Fill in the methods of the Model. Please do not change the given methods for the checker script to work.
You can add new methods, and make changes. The checker script performs:


    M = Model()
    M.fit_model(train_x,train_y)
    prediction = M.predict(test_x)

It uses predictions to compare to the ground truth using the cost_function above.
"""

class Model():

    def __init__(self):
        """
            TODO: enter your code here
        """
        self.lamda = 1
        self.model = None

    def predict(self, test_x):
        """
            TODO: enter your code here
        """
        ## dummy code below 
        # y = np.ones(test_x.shape[0]) * THRESHOLD - 0.00001
        y = self.model.predict(test_x)

        return y

    def fit_model(self, train_x, train_y):
        """
             TODO: enter your code here
        """

        clf = Ridge(alpha=self.lamda,solver='cholesky')
        self.model = clf.fit(train_x, train_y)

        pass

def main():
    train_x_name = "train_x.csv"
    train_y_name = "train_y.csv"

    # google drive directories for work in google colab - comment if working in .py file and uncomment original paths
    # train_x_name = "/content/drive/My Drive/ETHZ/ProbabilisticAI/Projects/Project1/train_x.csv"
    # train_y_name = "/content/drive/My Drive/ETHZ/ProbabilisticAI/Projects/Project1/train_y.csv"
    # test_x_name = "/content/drive/My Drive/ETHZ/ProbabilisticAI/Projects/Project1/test_x.csv"

    train_x = np.loadtxt(train_x_name, delimiter=',')
    train_y = np.loadtxt(train_y_name, delimiter=',')

    # load the test dateset
    test_x_name = "test_x.csv"
    test_x = np.loadtxt(test_x_name, delimiter=',')

    M = Model()
    M.fit_model(train_x, train_y)
    prediction = M.predict(test_x)

if __name__ == "__main__":
    main()

